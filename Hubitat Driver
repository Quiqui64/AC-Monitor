/**
 * This is the driver code for Hubitat
 *  If you need later you could add a offset for current, tempature or humidity.
 */

metadata {
	definition (name: "Matt's AC Monitor", namespace: "Jason Brown", author: "Jason Brown") {
		capability "Temperature Measurement"
		capability "Relative Humidity Measurement"
		capability "Energy Meter"
        
		command "setTemperature", ["decimal"]
        command "setHumidity", ["decimal"]
		command "setCurrentMeter", ["decimal"]
        
        attribute " ", "string"
		attribute "LastEventDate", "string"
		attribute "LastEventTime", "string"
		attribute "amps", "string"
	}
    
    
  preferences() {
    
     section("") {
        input "debugMode", "bool", title: "Enable debug logging", required: true, defaultValue: false 
		input "dateFormatNow", "enum", title: "Last Event Date Format", required:true, options: ["dd MMM yyyy", "MMM dd yyyy"]
 		}  
 }   
}

def installed(){
    initialize()
}

def initialize() {
    logCheck()
}

def sendLastEvent(){
	if(dateFormatNow == null){log.warn "Date format not set"}
	if(dateFormatNow == "dd MMM yyyy"){
	def date = new Date()
	state.LastTime = date.format('HH:mm:ss', location.timeZone)
	state.LastDate = date.format('dd MMM yyyy', location.timeZone)	
	}
	
	if(dateFormatNow == "MMM dd yyyy"){
	def date = new Date()
	state.LastTime = date.format('HH:mm:ss', location.timeZone)
	state.LastDate = date.format('MMM dd yyyy', location.timeZone)	
	}	
	
	sendEvent(name: "LastEventTime", value: state.LastTime)
	sendEvent(name: "LastEventDate", value: state.LastDate)

}

def setHumidity(hum1) {
	state.ReceivedHumidity = hum1
    LOGDEBUG( "Setting humidity for ${device.displayName} from external input ($state.LastDeviceHumid), Humidity = ${state.ReceivedHumidity}.")
	sendEvent(name: "humidity", value: state.ReceivedHumidity, unit: "%")
}

def setTemperature(temp1){ 
 state.ReceivedTemp = temp1
	LOGDEBUG( "Setting temperature for ${device.displayName} from external input ($state.LastDeviceTemperature), Temperature = ${state.ReceivedTemp}.")
    sendEvent(name:"temperature", value: state.ReceivedTemp , unit: "F")   
}

def  setCurrentMeter(cur1){ 
 state.ReceivedCur = cur1
	LOGDEBUG( "Setting amps for ${device.displayName} from external input ($state.LastDeviceEnergyMeter), EnergyMeter = ${state.ReceivedCur}.")
    sendEvent(name:"amps", value: state.ReceivedCur , unit: "A")   
}


def logCheck(){
state.checkLog = debugMode
if(state.checkLog == true){
log.info "All Logging Enabled"
}
else if(state.checkLog == false){
log.info "Debug Logging Disabled"
}

}
def LOGDEBUG(txt){
    try {
    	if (settings.debugMode) { log.debug("Device Version: ${state.version}) - ${txt}") }
    } catch(ex) {
    	log.error("LOGDEBUG unable to output requested data!")
    }
}
